1ва задача

SELECT COUNT(*) AS `count` from wizzard_deposits;

2ра задача

SELECT MAX(magic_wand_size) AS longest_magic_wand from wizzard_deposits;

3та задача

SELECT deposit_group, MAX(magic_wand_size) AS longest_magic_wand from wizzard_deposits
GROUP BY deposit_group
ORDER BY longest_magic_wand, deposit_group;

4та задача

SELECT deposit_group from wizzard_deposits
GROUP BY deposit_group
HAVING AVG(magic_wand_size)
LIMIT 1;

5та задача

SELECT deposit_group, SUM(deposit_amount) AS total_sum from wizzard_deposits
GROUP BY deposit_group
ORDER BY total_sum;

6та задача

SELECT deposit_group, SUM(deposit_amount) AS total_sum from wizzard_deposits
WHERE magic_wand_creator = 'Ollivander family'
GROUP BY deposit_group
ORDER BY deposit_group;

7ма задача

SELECT deposit_group, SUM(deposit_amount) AS total_sum from wizzard_deposits
WHERE magic_wand_creator = 'Ollivander family'
GROUP BY deposit_group
HAVING total_sum < 150000
ORDER BY total_sum DESC;

8ма задача

SELECT deposit_group, magic_wand_creator, MIN(deposit_charge) AS min_deposit_charge FROM wizzard_deposits
GROUP BY deposit_group, magic_wand_creator
ORDER BY magic_wand_creator, deposit_group;

9та задача

SELECT (
CASE 
WHEN age BETWEEN 0 and 10 THEN '[0-10]'
WHEN age BETWEEN 11 and 20 THEN '[11-20]'
WHEN age BETWEEN 21 and 30 THEN '[21-30]'
WHEN age BETWEEN 31 and 40 THEN '[31-40]'
WHEN age BETWEEN 41 and 50 THEN '[41-50]'
WHEN age BETWEEN 51 and 60 THEN '[51-60]'
ELSE '[61+]'
END) AS group_age, COUNT(*) AS wizard_count from wizzard_deposits
GROUP BY group_age
ORDER BY wizard_count;

10та задача

SELECT left(first_name, 1) AS first_letter FROM wizzard_deposits
WHERE deposit_group = 'Troll chest'
GROUP BY first_letter
ORDER BY first_letter;

11та задача

SELECT deposit_group, is_deposit_expired, AVG(deposit_interest) AS average_interest FROM wizzard_deposits
WHERE deposit_start_date > '1985-01-01'
GROUP BY deposit_group, is_deposit_expired
ORDER BY deposit_group DESC, is_deposit_expired;

12та задача

SELECT department_id, MIN(salary) AS minimum_salary FROM employees
WHERE department_id IN(2,5,7) AND hire_date > '2000-01-01'
GROUP BY department_id
ORDER BY department_id;

13та задача

CREATE TABLE `high_paid_employees` AS 
SELECT * FROM employees
WHERE salary > 30000;

DELETE FROM `high_paid_employees`
WHERE manager_id = 42;

UPDATE `high_paid_employees`
SET 
salary = salary + 5000
WHERE department_id = 1;

SELECT department_id, AVG(salary) AS avg_salary FROM `high_paid_employees`
GROUP BY department_id
ORDER BY department_id;

14та задача

SELECT department_id, MAX(salary) AS max_salary FROM employees
GROUP BY department_id
HAVING max_salary NOT BETWEEN 30000 AND 70000
ORDER BY department_id;

15та задача

SELECT COUNT(*) AS '' from employees
WHERE manager_id IS NULL;

16та задача

SELECT department_id, (SELECT DISTINCT e2.salary FROM employees AS e2
WHERE e2.department_id = e1.department_id
ORDER BY e2.salary DESC
LIMIT 2,1) AS third_highest_salary FROM employees AS e1
GROUP BY department_id
HAVING third_highest_salary IS NOT NULL
ORDER BY department_id;

17та задача

SELECT e.first_name, e.last_name, e.department_id FROM employees AS e
WHERE e.salary > (SELECT AVG(e2.salary) FROM employees AS e2
WHERE e2.department_id = e.department_id)
ORDER BY department_id, employee_id
LIMIT 10;

18та задача

SELECT department_id, SUM(salary) AS total_salary FROM `employees`
GROUP BY department_id
ORDER BY department_id;