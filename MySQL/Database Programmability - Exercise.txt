1ва задача 

CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT e.first_name, e.last_name from employees AS e
WHERE e.salary > 35000
ORDER BY e.first_name, e.last_name;
END

2ра задача

CREATE PROCEDURE usp_get_employees_salary_above(salary DECIMAL(9,4))
BEGIN
SELECT e.first_name, e.last_name from employees AS e
WHERE e.salary >= salary
ORDER BY e.first_name, e.last_name, e.employee_id;
END

3та задача

CREATE PROCEDURE usp_get_towns_starting_with(starting_string VARCHAR(256))
BEGIN
SELECT t.name FROM towns AS t
WHERE t.name LIKE CONCAT(starting_string, '%')
ORDER BY t.name ;
END

4та задача

CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(256))
BEGIN
SELECT e.first_name, e.last_name FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
JOIN towns as t
ON t.town_id = a.town_id
WHERE t.name = town_name
ORDER BY e.first_name, e.last_name, e.employee_id;
END

5та задача

CREATE FUNCTION ufn_get_salary_level(employee_salary DECIMAL(9,2))
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
DECLARE output VARCHAR(10);
SET output :=
CASE
WHEN employee_salary < 30000 THEN 'Low'
WHEN employee_salary >= 30000 AND employee_salary <= 50000 THEN 'Average'
ELSE 'High'
END;
RETURN output;
END

6та задача

CREATE FUNCTION ufn_get_salary_level(employee_salary DECIMAL(9,2))
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
DECLARE output VARCHAR(10);
SET output :=
CASE
WHEN employee_salary < 30000 THEN 'Low'
WHEN employee_salary >= 30000 AND employee_salary <= 50000 THEN 'Average'
ELSE 'High'
END;
RETURN output;
END;

CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(10))
BEGIN
SELECT e.first_name, e.last_name FROM employees AS e
WHERE (SELECT ufn_get_salary_level(e.salary) = salary_level)
ORDER BY e.first_name DESC, e.last_name DESC;
END; 

7ма задача

CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS INT
DETERMINISTIC
BEGIN
          DECLARE indx INT DEFAULT 1;
          DECLARE current_letter VARCHAR(1);
          WHILE indx <= CHAR_LENGTH(word) DO
          SET current_letter = SUBSTRING(word,indx,1);
          IF LOCATE(current_letter, set_of_letters)  = 0
          THEN RETURN 0;
          END IF;
          SET indx = indx + 1;
          END WHILE;
RETURN 1;
END

8ма задача

CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
SELECT CONCAT(ah.first_name, ' ', ah.last_name) as full_name FROM account_holders AS ah
ORDER BY full_name;
END

9та задача

CREATE PROCEDURE usp_get_holders_with_balance_higher_than(sum_to_compare_with DECIMAL)
BEGIN
SELECT ah.first_name, ah.last_name FROM account_holders AS ah
JOIN accounts AS a
ON ah.id = a.account_holder_id
GROUP BY ah.id
HAVING SUM(a.balance) > sum_to_compare_with;
END

10та задача

CREATE FUNCTION ufn_calculate_future_value(sum DECIMAL(19,4), yearly_interest_rate DOUBLE, number_of_years INT)
RETURNS DECIMAL (19,4)
DETERMINISTIC
BEGIN
RETURN sum * POW((1+yearly_interest_rate),number_of_years);
END

11та задача

CREATE FUNCTION ufn_calculate_future_value(sum DECIMAL(19,4), yearly_interest_rate DOUBLE, number_of_years INT)
RETURNS DECIMAL (19,4)
DETERMINISTIC
BEGIN
RETURN sum * POW((1+yearly_interest_rate),number_of_years);
END;

CREATE PROCEDURE usp_calculate_future_value_for_account(account_id INT, interest_rate DECIMAL(19,4))
BEGIN
SELECT a.id, ah.first_name, ah.last_name, a.balance , (SELECT ufn_calculate_future_value((SELECT a.balance WHERE a.id = account_id), floor(interest_rate * 10000) / 10000, 5)) AS future_sum FROM account_holders AS ah
JOIN accounts AS a
ON ah.id = a.account_holder_id
WHERE a.id = account_id;
END;

12та задача

CREATE PROCEDURE usp_deposit_money(account_id INT, amount_money DECIMAL(19,4))
BEGIN
START TRANSACTION;
IF amount_money <= 0 
THEN ROLLBACK;
ELSE
UPDATE accounts AS a
SET a.balance = a.balance + amount_money
WHERE a.id = account_id;
END IF;
END

13 задача

CREATE PROCEDURE usp_withdraw_money(account_id INT, amount_money DECIMAL(19,4))
BEGIN
START TRANSACTION;
IF amount_money <= 0 
THEN ROLLBACK;
ELSE
IF ((SELECT balance FROM accounts WHERE id = account_id) >= amount_money)
THEN
UPDATE accounts AS a
SET a.balance = a.balance - amount_money
WHERE a.id = account_id;
END IF;
END IF;
END

14та задача

CREATE PROCEDURE usp_transfer_money(from_account_id INT, to_account_id INT, amount_money DECIMAL(19,4))
BEGIN
START TRANSACTION;
IF amount_money <= 0 OR (SELECT balance FROM accounts WHERE id = from_account_id) < amount_money
                     OR (from_account_id = to_account_id)
                     OR (SELECT COUNT(*) FROM accounts WHERE id = from_account_id) = 0
                     OR (SELECT COUNT(*) FROM accounts WHERE id = to_account_id) = 0
THEN ROLLBACK;
ELSE
UPDATE accounts AS a
SET a.balance = a.balance - amount_money
WHERE a.id = from_account_id;
UPDATE accounts AS a
SET a.balance = a.balance + amount_money
WHERE a.id = to_account_id;
END IF;
END

15та задача

CREATE TABLE `logs`(
log_id INT PRIMARY KEY AUTO_INCREMENT,
account_id INT,
old_sum DECIMAL(19,4),
new_sum DECIMAL(19,4)
);


CREATE TRIGGER tr_update_sum
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
INSERT INTO `logs`(account_id, old_sum, new_sum)
VALUES(OLD.id, OLD.balance, NEW.balance);
END;

16 задача

CREATE TABLE `logs`(
log_id INT PRIMARY KEY AUTO_INCREMENT,
account_id INT,
old_sum DECIMAL(19,4),
new_sum DECIMAL(19,4)
);


CREATE TRIGGER tr_update_sum
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
INSERT INTO `logs`(account_id, old_sum, new_sum)
VALUES(OLD.id, OLD.balance, NEW.balance);
END;

CREATE TABLE `notification_emails`(
id INT PRIMARY KEY AUTO_INCREMENT,
recipient INT,
`subject` VARCHAR(50),
body VARCHAR(256)
);

CREATE TRIGGER tr_new_log
AFTER INSERT
ON `logs`
FOR EACH ROW
BEGIN
INSERT INTO `notification_emails`(recipient, `subject`, body)
VALUES(NEW.account_id, CONCAT('Balance change for account: ',NEW.account_id), CONCAT('On ', DATE_FORMAT(NOW(), '%b %d %Y at %r'), ' your balance was changed from ', ROUND(NEW.old_sum, 2), ' to ', ROUND(NEW.new_sum, 2), '.'));
END;
